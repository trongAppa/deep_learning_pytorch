-- scikit-learn 설치
pip install scikit-learn

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split

-- 훈련데이터와 테스트데이터 구분하기
-- zip 함수를 이용하여 분리하기
In [2]: 
X, y = zip(['a', 1], ['b', 2], ['c', 3])
print('X 데이터 :',X)
print('y 데이터 :',y)
   
Out[2]:
X 데이터 : ('a', 'b', 'c')
y 데이터 : (1, 2, 3)

In [3]: 
# 리스트의 리스트 또는 행렬 또는 뒤에서 배울 개념인 2D 텐서.
sequences = [['a', 1], ['b', 2], ['c', 3]]
X, y = zip(*sequences)
print('X 데이터 :',X)
print('y 데이터 :',y)

Out[3]:
X 데이터 : ('a', 'b', 'c')
y 데이터 : (1, 2, 3)

In [4]: 
values = [['당신에게 드리는 마지막 혜택!', 1],
['내일 뵐 수 있을지 확인 부탁드...', 0],
['도연씨. 잘 지내시죠? 오랜만입...', 0],
['(광고) AI로 주가를 예측할 수 있다!', 1]]
columns = ['메일 본문', '스팸 메일 유무']

df = pd.DataFrame(values, columns=columns)
df

Out[4]:
                    메일 본문  스팸 메일 유무
0        당신에게 드리는 마지막 혜택!         1
1    내일 뵐 수 있을지 확인 부탁드...         0
2    도연씨. 잘 지내시죠? 오랜만입...         0
3  (광고) AI로 주가를 예측할 수 있다!         1

In [5]:
X = df['메일 본문']
y = df['스팸 메일 유무']

In [6]:
print('X 데이터 :',x.to_list())
print('Y 데이터 :',y.to-list())

Out[6]:
X 데이터 : ['당신에게 드리는 마지막 혜택!', '내일 뵐 수 있을지 확인 부탁드...', '도연씨. 잘 지내시죠? 오 랜만입...', '(광고) AI로 주가를 예측할 수 있다!']
y 데이터 : [1, 0, 0, 1]

-- numpy slicing
In [7]:
np_array = np.arange(0,16).reshape((4,4))
print('전체 데이터 :')
print(np_array)

Out[7]:
전체 데이터 :
[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]
 [12 13 14 15]]
 
In [8]:
x = np_array[:, :3]
y = np_array[:,3]

print('X 데이터 :')
print(x)
print('y 데이터 :',y)

Out[8]:
X 데이터 :
[[ 0  1  2]
 [ 4  5  6]
 [ 8  9 10]
 [12 13 14]]
y 데이터 : [ 3  7 11 15]

-- 사이킷 런을 이용하여 분리하기 - 사이킷런은 학습용 테스트와 테스트용 데이터를 쉽게 분리할 수 있게 해주는 train_test_split()를 지원
-- x_train, x_test, y_train, y_test = train_test_split(x, y, test_size= 0.2, random_state=1234)
In [10]: 
# 임의로 X와 y 데이터를 생성
x, y = np.arange(10).reshape((5, 2)), range(5)

print('X 전체 데이터 :')
print(x)
print('y 전체 데이터 :')
print(list(y))

Out[10]:
[[0 1]
 [2 3]
 [4 5]
 [6 7]
 [8 9]]
y 전체 데이터 :
[0, 1, 2, 3, 4]

In [11]: 
# 7:3의 비율로 훈련 데이터와 테스트 데이터 분리
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=1234)

In [12]:
print('X 훈련 데이터 :')
print(X_train)
print('X 테스트 데이터 :')
print(X_test)

Out[12]:
X 훈련 데이터 :
[[2 3]
 [4 5]
 [6 7]]
X 테스트 데이터 :
[[8 9]
 [0 1]]

In [13]:
print('y 훈련 데이터 :')
print(y_train)
print('y 테스트 데이터 :')
print(y_test)

Out[13]:
y 훈련 데이터 :
[1, 2, 3]
y 테스트 데이터 :
[4, 0]

In [14]:
# random_state의 값을 변경
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=1)

In [15]:
print('X 훈련 데이터 :')
print(x_train)
print('X 테스트 데이터 :')
print(x_test)

Out[15]:
X 훈련 데이터 :
[[8 9]
 [0 1]
 [6 7]]
X 테스트 데이터 :
[[4 5]
 [2 3]]

In [16]:
print('y 훈련 데이터 :')
print(y_train)
print('y 테스트 데이터 :')
print(y_test)

Out[16]:
y 훈련 데이터 :
[4, 0, 3]
y 테스트 데이터 :
[2, 1]

In [17]:
# random_state을 이전의 값이었던 1234로 변경
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=1234)

In [18]:
print('y 훈련 데이터 :')
print(y_train)
print('y 테스트 데이터 :')
print(y_test)

Out[18]:
y 훈련 데이터 :
[1, 2, 3]
y 테스트 데이터 :
[4, 0]


-- 수동으로 데이터 분리
-- 데이터 생성
In [19]:
# 실습을 위해 임의로 X와 y가 이미 분리 된 데이터를 생성
X, y = np.arange(0,24).reshape((12,2)), range(12)

print('X 전체 데이터 :')
print(X)
print('y 전체 데이터 :')
print(list(y))

Out[19]:
X 전체 데이터 :
[[ 0  1]
 [ 2  3]
 [ 4  5]
 [ 6  7]
 [ 8  9]
 [10 11]
 [12 13]
 [14 15]
 [16 17]
 [18 19]
 [20 21]
 [22 23]]
y 전체 데이터 :
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]

In [20]:
num_of_train = int(len(X) * 0.8) # 데이터의 전체 길이의 80%에 해당하는 길이값을 구한다.
num_of_test = int(len(X) - num_of_train) # 전체 길이에서 80%에 해당하는 길이를 뺀다.
print('훈련 데이터의 크기 :',num_of_train)
print('테스트 데이터의 크기 :',num_of_test)

Out[20]:
훈련 데이터의 크기 : 9
테스트 데이터의 크기 : 3

In [21]:
X_test = X[num_of_train:] # 전체 데이터 중에서 20%만큼 뒤의 데이터 저장
y_test = y[num_of_train:] # 전체 데이터 중에서 20%만큼 뒤의 데이터 저장
X_train = X[:num_of_train] # 전체 데이터 중에서 80%만큼 앞의 데이터 저장
y_train = y[:num_of_train] # 전체 데이터 중에서 80%만큼 앞의 데이터 저장

print('X 테스트 데이터 :')
print(X_test)
print('y 테스트 데이터 :')
print(list(y_test))

Out[20]:
X 테스트 데이터 :
[[18 19]
 [20 21]
 [22 23]]
y 테스트 데이터 :
[9, 10, 11]