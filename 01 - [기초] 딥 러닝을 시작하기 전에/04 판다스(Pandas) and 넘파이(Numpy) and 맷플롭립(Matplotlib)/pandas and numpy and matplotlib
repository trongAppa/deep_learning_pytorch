-- pandas / 파이썬 데이터 처리를 위한 라이브러리
pip install pandas

In [1]: import pandas as pd

In [2]: pd.__version__
Out[2]: '1.3.5'


--pandas의 사용 데이터 구조
시리즈(Series)
데이터프레임(DataFrame)
패널(Panel)


--시리즈(Series) - 1차원 배열(맵)
In [3]: sr = pd.Series([17000,18000,1000,5000],index=["피자","치킨","콜라","맥주"])

In [4]: 
print('시리즈 출력 :')
print('-'*15)
print(sr)

Out[4]:
시리즈 출력 :
---------------
피자    17000
치킨    18000
콜라     1000
맥주     5000
dtype: int64

-- 시리즈에 값과 인덱스를 출력 가능함
In [5]: 
print('시리즈의 값 : {}'.format(sr.values))
print('시리즈의 인덱스 : {}'.format(sr.index))
Out[5]:
시리즈의 값 : [17000 18000  1000  5000]
시리즈의 인덱스 : Index(['피자', '치킨', '콜라', '맥주'], dtype='object')


-- 데이터프레임(DataFrame) - 2차원 배열 (행렬)
In [6]:
values = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
index = ['one', 'two', 'three']
columns = ['A', 'B', 'C']

In [7]: df = pd.DataFrame(values, index=index, columns=columns)

In [8]:
print('데이터프레임 출력 :')
print('-'*18)
print(df)

Out[8]:
데이터프레임 출력 :
------------------
       A  B  C
one    1  2  3
two    4  5  6
three  7  8  9

-- 데이터프레임도 값과 인덱스, 컬럼을 출력 가능함
In [9]:
print('데이터프레임의 인덱스 : {}'.format(df.index))
print('데이터프레임의 열이름: {}'.format(df.columns))
print('데이터프레임의 값 :')
print('-'*18)
print(df.values)

Out[9]:
데이터프레임의 인덱스 : Index(['one', 'two', 'three'], dtype='object')
데이터프레임의 열이름: Index(['A', 'B', 'C'], dtype='object')
데이터프레임의 값 :
------------------
[[1 2 3]
 [4 5 6]
 [7 8 9]]
 
 
-- 데이터프레임은 리스트(List), 시리즈(Series), 딕셔너리(dict), Numpy의 ndarrays, 또 다른 데이터프레임으로부터 생성할 수 있음
-- 리스트(List) 사용하여 데이터프레임 생성
In [10]:
dfList = [
    ['1000', 'Steve', 90.72], 
    ['1001', 'James', 78.09], 
    ['1002', 'Doyeon', 98.43], 
    ['1003', 'Jane', 64.19], 
    ['1004', 'Pilwoong', 81.30],
    ['1005', 'Tony', 99.14],
]

df1 = pd.DataFrame(dfList)
print(df1)

Out[10]:
      0         1      2
0  1000     Steve  90.72
1  1001     James  78.09
2  1002    Doyeon  98.43
3  1003      Jane  64.19
4  1004  Pilwoong  81.30
5  1005      Tony  99.14

-- 컬럼 설정가능
In [11]:
df1 = pd.DataFrame(dfList, columns=['학번', '이름', '점수'])
print(df1)

Out[11]:
     학번        이름     점수
0  1000     Steve  90.72
1  1001     James  78.09
2  1002    Doyeon  98.43
3  1003      Jane  64.19
4  1004  Pilwoong  81.30
5  1005      Tony  99.14

-- 딕셔너리(dictionary)를 사용하여 데이터프레임 생성
In [12]:
dicData = {
	'학번' : ['1000', '1001', '1002', '1003', '1004', '1005'],
	'이름' : [ 'Steve', 'James', 'Doyeon', 'Jane', 'Pilwoong', 'Tony'],
	'점수': [90.72, 78.09, 98.43, 64.19, 81.30, 99.14]
}

df2 = pd.DataFrame(dicData)
print(df2)
	
Out[12]:
     학번        이름     점수
0  1000     Steve  90.72
1  1001     James  78.09
2  1002    Doyeon  98.43
3  1003      Jane  64.19
4  1004  Pilwoong  81.30
5  1005      Tony  99.14


-- 데이터 프레임 함수
-- head 앞에서 해당 숫자 행만큼만 출력
In [13]: print(df2.head(3))

Out[13]:
     학번      이름     점수
0  1000   Steve  90.72
1  1001   James  78.09
2  1002  Doyeon  98.43

-- tail 뒤에서 해당 숫자 행만큼만 출력
In [14]: print(df2.tail(3))

Out[14]:
     학번        이름     점수
3  1003      Jane  64.19
4  1004  Pilwoong  81.30
5  1005      Tony  99.14

-- 해당 열 출력
In [15]: print(df2['학번'])

Out[15]:
0    1000
1    1001
2    1002
3    1003
4    1004
5    1005
Name: 학번, dtype: object


--외부데이터 읽기
-- csv파일을 읽을 경우 pandas.read_csv()를 통해 파일을 읽어 올 수 있음
-- 폴더 이동을 위한 import
In [16]: import os

-- 폴더에 있는 파일확인
In [17]: print(os.listdir(os.getcwd()))

Out[17]: 폴더안에 있는 파일(['.git', '01 - [기초] 딥 러닝을 시작하기 전에'])

-- 폴더 파일이동
In [18]: os.chdir('') 

In [19]: 
df3 = pd.read_csv('example.csv')
print(df3)

Out[19]: 
   studentid      name  score
0       1000    Steve   90.72
1       1001   James    78.09
2       1002    Doyeon  98.43
3       1003      Jane  64.19
4       1004  Pilwoong  81.30
5       1005      Tony  99.14

In [20]: print(df3.index)

Out[20]: RangeIndex(start=0, stop=6, step=1)


-- numpy - 수치 데이터를 다루는 파이썬 패키지, 다차원 행렬 자료구조인 ndarray를 통해 벡터 및 행렬을 사용하는 선형 대수 계산에서 주로 사용
-- numpy 설치
pip install numpy

In [1]: import numpy as np

In [2]: np.__version__
Out[2]: '1.21.6'


-- np.array() - Numpy의 핵심은 ndarray / 리스트, 튜플, 배열로 부터 ndarray
-- 1차원
In [3]:
vec = np.array([1, 2, 3, 4, 5])
print(vec)

Out[3]: [1 2 3 4 5]

-- 2차원
In [4]:
mat = np.array([[10, 20, 30], [ 60, 70, 80]]) 
print(mat)

Out[4]:
[[10 20 30]
 [60 70 80]]
 
In [5]:
print('vec의 타입 :',type(vec))
print('mat의 타입 :',type(mat))

Out[5]:
vec의 타입 : <class 'numpy.ndarray'>
mat의 타입 : <class 'numpy.ndarray'>

In [6]:
print('vec의 축의 개수 :',vec.ndim) # 축의 개수 출력
print('vec의 크기(shape) :',vec.shape) # 크기 출력

Out[6]:
vec의 축의 개수 : 1
vec의 크기(shape) : (5,)

In [7]:
print('mat의 축의 개수 :',mat.ndim) # 축의 개수 출력
print('mat의 크기(shape) :',mat.shape) # 크기 출력

Out[7]:
mat의 축의 개수 : 2
mat의 크기(shape) : (2, 3)

-- ndarray의 초기화
-- np.zeros()는 배열의 모든 원소에 0을 삽입
In [8]: 
zero_mat = np.zeros((2,3))
print(zero_mat)

Out[8]:
[[0. 0. 0.]
 [0. 0. 0.]]
 
-- np.ones()는 배열의 모든 원소에 1을 삽입
In [9]: 
one_mat = np.ones((2,3))
print(one_mat)

Out[9]:
[[0. 0. 0.]
 [0. 0. 0.]]
 
-- np.full()은 배열에 사용자가 지정한 값을 삽입
In [10]: 
same_value_mat = np.full((2,2), 7)
print(same_value_mat)

Out[10]:
[[7 7]
 [7 7]]
 
-- np.eye()는 대각선으로는 1이고 나머지는 0인 2차원 배열을 생성(좌상->우하)
In [11]: 
eye_mat = np.eye(3)
print(eye_mat)

Out[11]:
[[1. 0. 0.]
 [0. 1. 0.]
 [0. 0. 1.]]
 
-- np.random.random()은 임의의 값을 가지는 배열을 생성
In [12]: 
random_mat = np.random.random((2,2))
print(random_mat)

Out[12]:
[[0.38983502 0.71579076]
 [0.15587649 0.61785266]]
 

-- np.arange() - 0부터 n-1까지의 값을 가지는 배열을 생성
In [13]: 
# 0부터 9까지
range_vec = np.arange(10)
print(range_vec)

Out[13]: [0 1 2 3 4 5 6 7 8 9]

In [14]: 
# 1부터 9까지 +2씩 적용되는 범위
n = 2
range_n_step_vec = np.arange(1, 10, n)
print(range_n_step_vec)

Out[14]: [1 3 5 7 9]

-- np.reshape() - 내부 데이터는 변경하지 않으면서 배열의 구조를 변경
In [15]: 
reshape_mat = np.array(np.arange(30)).reshape((5,6))
print(reshape_mat)

Out[15]: 
[[ 0  1  2  3  4  5]
 [ 6  7  8  9 10 11]
 [12 13 14 15 16 17]
 [18 19 20 21 22 23]
 [24 25 26 27 28 29]]
 
 
-- Numpy 슬라이싱
In [16]:
mat = np.array([[1, 2, 3], [4, 5, 6]])
print(mat)

Out[16]: 
[[1 2 3]
 [4 5 6]]

In [17]:
# 첫번째 행 출력
slicing_mat = mat[0, :]
print(slicing_mat)

Out[17]: 
[1 2 3]

In [18]:
# 두번째 열 출력
slicing_mat = mat[:, 1]
print(slicing_mat)

Out[18]: 
[2 5]


-- Numpy 정수 인덱싱(integer indexing)
In [19]:
mat = np.array([[1, 2], [4, 5], [7, 8]])
print(mat)

Out[19]: 
[[1 2]
 [4 5]
 [7 8]]
 
In [20]:
# 1행 0열의 원소
# => 0부터 카운트하므로 두번째 행 첫번째 열의 원소.
print(mat[1, 0])

Out[20]: 4

In [21]:
# mat[[2행, 1행],[0열, 1열]]
# 각 행과 열의 쌍을 매칭하면 2행 0열, 1행 1열의 두 개의 원소.
indexing_mat = mat[[2, 1],[0, 1]]
print(indexing_mat)

Out[21]: 
[7 5]


-- Numpy 연산
In [22]:
x = np.array([1,2,3])
y = np.array([4,5,6])

In [23]:
# result = np.add(x, y)와 동일.
result = x + y
print(result)

Out[23]: [5 7 9]

In [24]:
# result = np.subtract(x, y)와 동일.
result = x - y
print(result)

Out[24]: [-3 -3 -3]

In [25]:
# result = np.multiply(result, x)와 동일.
result = result * x
print(result)

Out[25]: [-3 -6 -9]

In [26]:
# result = np.divide(result, x)와 동일.
result = result / x
print(result)

Out[26]: [-3. -3. -3.]

In [27]:
# np.dot() 행렬 곱셈
mat1 = np.array([[1,2],[3,4]])
mat2 = np.array([[5,6],[7,8]])
mat3 = np.dot(mat1, mat2)
print(mat3)

Out[27]:
[[19 22]
 [43 50]]
 
 
-- 맷플롯립(Matplotlib) - 데이터를 차트(chart)나 플롯(plot)으로 시각화하는 패키지 / 데이터 분석 이전에 데이터 이해를 위한 시각화나, 데이터 분석 후에 결과를 시각화하기 위해서 사용
-- 맷플롯립 설치
pip install matplotlib

In [1]: import matplotlib as mpl

In [2]: mpl.__version__
Out[2]: '3.5.3'

-- Matplotlib의 주요 모듈인 pyplot
In [3]: import matplotlib.pyplot as plt

In [4]:
plt.title('test')
plt.plot([1,2,3,4],[2,4,8,6])
plt.show()

Out[4]: 이미지 참고(test1.png)

In [5]:
plt.title('test')
plt.plot([1,2,3,4],[2,4,8,6])
plt.xlabel('hours')
plt.ylabel('score')
plt.show()

Out[5]: 이미지 참고(test2.png)

In [6]:
plt.title('students')
plt.plot([1,2,3,4],[2,4,8,6])
plt.plot([1.5,2.5,3.5,4.5],[3,5,8,10]) # 라인 새로 추가
plt.xlabel('hours')
plt.ylabel('score')
plt.legend(['A student', 'B student']) # 범례 삽입
plt.show()

Out[6]: 이미지 참고(students1.png)